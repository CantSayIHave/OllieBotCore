from util.containers import HelpForm as form


music = form('`{0}music <play/queue> [youtube link/search query/search result #]`\n'
             '`{0}music <queue> <clear/list>`\n'
             '`{0}music <search> [search query]`\n'
             '`{0}music <play/pause/skip/shuffle/current/disconnect>`\n\n'
             'Full youtube-to-voice music interface. To use `{0}music play`, you must be in a voice '
             'channel.\n'
             '*Note:* The only difference between `{0}music queue` and `{0}music play` is that the latter '
             'starts playing the queue. Both will add music to the queue.\n'
             '*Note:* `queue clear` is moderator-only.\n\n'
             'The command `{0}music <play/queue>` takes either a youtube link, a query to search youtube '
             'with, or a search result number (1-10). If provided a query, the first result will be added '
             'to the queue.\n'
             'Examples:\n'
             '`{0}music play https://www.youtube.com/watch?v=dQw4w9WgXcQ`\n'
             '`{0}music queue flume you and me`\n'
             '`{0}music play 2`\n'
             '*Note:* If a search has not been initiated, passing a number will not add anything.\n\n'
             'To initiate a search, call `{0}music <search> [search query]`, and the first 10 results '
             'will be displayed. You may then select a choice with `play` or `queue`.\n\n'
             'Use `current` to get the current track info.\n\n'
             'Lastly, each command has shortened call methods for ease-of-use if desired:\n'
             '`play:          p`\n'
             '`queue:         q`\n'
             '`queue clear:   qc or cq`\n'
             '`queue list:    ql or lq`\n'
             '`search:        se`\n'
             '`pause:         ps`\n'
             '`skip:          sk`\n'
             '`shuffle:       sh`\n'
             '`disconnect:    d`\n'
             '`current:       c`\n\n'
             "Example: `{0}music p home resonance`\n")

music.add_tagline('play music from YouTube')
